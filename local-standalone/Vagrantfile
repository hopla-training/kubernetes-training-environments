# -*- mode: ruby -*-
# vi: set ft=ruby :
#Vagrant::DEFAULT_SERVER_URL.replace('https://vagrantcloud.com')
# Require YAML module
require 'yaml'

config = YAML.load_file(File.join(File.dirname(__FILE__), 'instances.local.yml'))

base_flavour=config['environment']['base_flavour']

base_box=config['environment']['base_box']

base_box_version=config['environment']['base_box_version']

domain=config['environment']['domain']

boxes = config['boxes']

boxes_hostsfile_entries=""

boxes_hosts=""

 boxes.each do |box|
   boxes_hostsfile_entries=boxes_hostsfile_entries+box['mgmt_ip'] + ' ' +  box['name'] + ' ' + box['name']+'.'+domain+'\n'
   boxes_hosts=boxes_hosts+box['mgmt_ip'] + ' '
  end

docker_engine_version=config['environment']['docker_engine_version']
kubernetes_version=config['environment']['kubernetes_version']
kubernetes_token=config['environment']['kubernetes_token']


update_hosts = <<SCRIPT
    echo "127.0.0.1 localhost" >/etc/hosts
    echo -e "#{boxes_hostsfile_entries}" |tee -a /etc/hosts
SCRIPT

deb_ansible_enablement = <<SCRIPT
  DEBIAN_FRONTEND=noninteractive apt-get install -qq python
  useradd -m -s /bin/bash ubuntu
  mkdir -p ~ubuntu/.ssh
  cp /keys/ubuntu.pub ~ubuntu/.ssh/authorized_keys
  chown -R ubuntu:ubuntu ~ubuntu/.ssh
  chmod -R 700 ~ubuntu/.ssh
  echo "ubuntu ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/ubuntu
  echo "Defaults:ubuntu !requiretty" >>/etc/sudoers.d/ubuntu
SCRIPT

deb_install_common_software  = <<SCRIPT
  systemctl stop apt-daily.timer
  systemctl disable apt-daily.timer
  sed -i '/Update-Package-Lists/ s/1/0/' /etc/apt/apt.conf.d/10periodic
  sudo killall apt apt-get
  while true;do fuser -vki /var/lib/apt/lists/lock || break ;done
  DEBIAN_FRONTEND=noninteractive apt-get update -qq \
  && DEBIAN_FRONTEND=noninteractive apt-get install -qq \
  ntpdate \
  ntp \
  python \
  && timedatectl set-timezone Europe/Madrid
SCRIPT

deb_disable_autoupdates = <<SCRIPT
    echo 'APT::Periodic::Enable \"0\";' > /etc/apt/apt.conf.d/02periodic
    systemctl disable apt-daily.service
    systemctl disable apt-daily.timer
SCRIPT

deb_add_student = <<SCRIPT
  DEBIAN_FRONTEND=noninteractive apt-get install -qq python
  useradd -m -s /bin/bash student
  mkdir -p ~student/.ssh
  cp /keys/student.pub ~student/.ssh/authorized_keys
  chown -R student:student ~student/.ssh
  chmod -R 700 ~student/.ssh
  echo "student ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/student
  echo "Defaults:student !requiretty" >>/etc/sudoers.d/student
SCRIPT

Vagrant.configure(2) do |config|
  VAGRANT_COMMAND = ARGV[0]
  config.vm.box = base_box
  config.vm.box_version = base_box_version
  config.vm.synced_folder "../keys/", "/keys",create:true

  boxes.each do |node|
    config.vm.define node['name'] do |config|
      config.vm.hostname = node['name']
      config.vm.provider "virtualbox" do |v|
	      v.linked_clone = true
        config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
	      v.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
        v.name = node['name']
        v.customize ["modifyvm", :id, "--memory", node['mem']]
        v.customize ["modifyvm", :id, "--cpus", node['cpu']]

        v.customize ["modifyvm", :id, "--nictype1", "Am79C973"]
        v.customize ["modifyvm", :id, "--nictype2", "Am79C973"]
        v.customize ["modifyvm", :id, "--nictype3", "Am79C973"]
        v.customize ["modifyvm", :id, "--nictype4", "Am79C973"]
        v.customize ["modifyvm", :id, "--nicpromisc1", "allow-all"]
        v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
        v.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
        v.customize ["modifyvm", :id, "--nicpromisc4", "allow-all"]
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      end

      config.vm.network "private_network",
      ip: node['mgmt_ip'],:netmask => "255.255.255.0",
      virtualbox__intnet: false,
      hostonlyadapter: ["vboxnet1"]


      config.vm.network "public_network",
      bridge: ["enp4s0","wlp3s0","enp3s0f1","wlp2s0","enp3s0"],
      auto_config: true

      config.vm.provision "disable-apt-periodic-updates", type: "shell" do |s|
    	s.privileged = true
    	s.inline = "echo 'APT::Periodic::Enable \"0\";' > /etc/apt/apt.conf.d/02periodic"
      end

      config.vm.provision :shell, :inline => update_hosts

      config.vm.provision :shell, :inline => deb_disable_autoupdates

      config.vm.provision :shell, :inline => deb_install_common_software
      
      config.vm.provision :shell, :inline => deb_ansible_enablement

      config.vm.provision :shell, :inline => deb_add_student
    
    end

  end


end
